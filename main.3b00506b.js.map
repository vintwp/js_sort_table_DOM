{"version":3,"sources":["scripts/main.js"],"names":["document","addEventListener","tableHead","querySelector","tableBody","sortLowToHigh","convertStrToInt","str","out","parseInt","replace","e","selectedName","table","sortIndex","sortedData","tableHeader","selectedColName","target","closest","textContent","firstElementChild","children","map","item","indexOf","sort","row1","row2","dataTypeOfSort","row1DataToSort","row2DataToSort","sortResult","localeCompare","innerHTML","forEach","row","append"],"mappings":";AAAA,aAEA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAAA,SAASC,iBAAiB,mBAAoB,WACtCC,IAAAA,EAAYF,SAASG,cAAc,SACnCC,EAAYJ,SAASG,cAAc,SACrCE,GAAgB,EAwBXC,SAAAA,EAAgBC,GAKhBC,OAFKC,SAASF,EAAIG,QAFb,MAE0B,KAzBxCR,EAAUD,iBAAiB,QAAS,SAACU,GAC7BC,IA6BWC,EACXC,EAGAC,EA1ByBC,EAQVC,EAffL,EAAeD,EAAEO,OAAOC,QAAQ,MAAMC,YAExCR,IA2BaC,EA1BLT,EAYSa,EAZEL,EA2BjBE,GAvByBE,EASad,EANrB,EAFGc,EAAYK,kBAAkBC,UAEVC,IAAI,SAAAC,GAAQA,OAAAA,EAAKJ,eAQ5CK,QAAQR,GAerBF,EAAa,EAFFF,EAAMS,UAEUI,KAAK,SAACC,EAAMC,GACrCC,IAKFC,EACAC,EACAC,EAPEH,EACFvB,EAAgBqB,EAAKL,SAASR,GAAWM,aACvC,SACA,SAsBCY,MAhBgB,WAAnBH,GACFC,EAAiBxB,EAAgBqB,EAAKL,SAASR,GAAWM,aAC1DW,EAAiBzB,EAAgBsB,EAAKN,SAASR,GAAWM,aAE1DY,EAAa3B,EACTyB,EAAiBC,EACjBA,EAAiBD,IAErBA,EAAiBH,EAAKL,SAASR,GAAWM,YAC1CW,EAAiBH,EAAKN,SAASR,GAAWM,YAE1CY,EAAa3B,EACTyB,EAAeG,cAAcF,GAC7BA,EAAeE,cAAcH,IAG5BE,IAGT3B,GAAiBA,EAEjBD,EAAU8B,UAAY,GAEtBnB,EAAWoB,QAAQ,SAAAC,GACjBhC,EAAUiC,OAAOD","file":"main.3b00506b.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const tableHead = document.querySelector('thead');\n  const tableBody = document.querySelector('tbody');\n  let sortLowToHigh = true; // true - low to high, false- high to low\n\n  tableHead.addEventListener('click', (e) => {\n    const selectedName = e.target.closest('th').textContent;\n\n    if (selectedName) {\n      sortTable(tableBody, selectedName);\n    }\n  });\n\n  function convertTableHeadToArray(tableHeader) {\n    const tableHeadElements = tableHeader.firstElementChild.children;\n\n    const tableHeadArray = [...tableHeadElements].map(item => item.textContent);\n\n    return tableHeadArray;\n  }\n\n  function findSortIndex(selectedColName) {\n    const tableHeader = convertTableHeadToArray(tableHead);\n\n    return tableHeader.indexOf(selectedColName);\n  }\n\n  function convertStrToInt(str) {\n    const reg = /\\D/g;\n\n    const out = parseInt(str.replace(reg, ''));\n\n    return out;\n  }\n\n  function sortTable(table, condition) {\n    const sortIndex = findSortIndex(condition);\n    const rowsData = table.children;\n\n    const sortedData = [...rowsData].sort((row1, row2) => {\n      const dataTypeOfSort\n        = convertStrToInt(row1.children[sortIndex].textContent)\n          ? 'number'\n          : 'string';\n\n      let row1DataToSort;\n      let row2DataToSort;\n      let sortResult;\n\n      if (dataTypeOfSort === 'number') {\n        row1DataToSort = convertStrToInt(row1.children[sortIndex].textContent);\n        row2DataToSort = convertStrToInt(row2.children[sortIndex].textContent);\n\n        sortResult = sortLowToHigh\n          ? row1DataToSort - row2DataToSort\n          : row2DataToSort - row1DataToSort;\n      } else {\n        row1DataToSort = row1.children[sortIndex].textContent;\n        row2DataToSort = row2.children[sortIndex].textContent;\n\n        sortResult = sortLowToHigh\n          ? row1DataToSort.localeCompare(row2DataToSort)\n          : row2DataToSort.localeCompare(row1DataToSort);\n      }\n\n      return sortResult;\n    });\n\n    sortLowToHigh = !sortLowToHigh;\n\n    tableBody.innerHTML = '';\n\n    sortedData.forEach(row => {\n      tableBody.append(row);\n    });\n  }\n});\n"]}